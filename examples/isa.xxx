################################################################################
# No operation.
################################################################################
= NOP   0x00

################################################################################
# Jump to ROM address A2 A2 A2 A2 A1 A1 A1 A1 (within the same ROM that
# contains this JCN instruction) if condition C1 C2 C3 C4 is true,
# otherwise go to the next instruction in sequence.
################################################################################
= JCN   0x1

################################################################################
# Fetch immediate (direct) from ROM Data D2 D2 D2 D2 D1 D1 D1 D1
# to index register pair location RRR.
################################################################################
= FIM       0x2
= FIM_BIT   0b0

################################################################################
# Fetch indirect from ROM. Send contents of index register pair location 0
# out as an address. Data fetched is placed into register pair location RRR.
################################################################################
= FIN       0x3
= FIN_BIT   0b0

################################################################################
# Jump indirect. Send contents of register pair RRR out as an address
# at A1 and A2 time in the instruction cycle.
################################################################################
= JIN       0x3
= JIN_BIT   0b1

################################################################################
# Jump unconditional to ROM address A3 A3 A3 A3 A2 A2 A2 A2 A1 A1 A1 A1.
################################################################################
= JUN   0x4

################################################################################
# Jump to subroutine ROM address A3 A3 A3 A3 A2 A2 A2 A2 A1 A1 A1 A1,
# save old address (up 1 level in stack.)
################################################################################
= JMS   0x5

################################################################################
# Increment contents of register RRRR.
################################################################################
= INC   0x6

################################################################################
# Increment contents of register RRRR. Go to ROM address A2 A2 A2 A2
# A1 A1 A1 A1 (within the same ROM that contains this ISZ instruction)
# if result != 0, otherwise go to the next instruction in sequence.
################################################################################
= ISZ   0x7

################################################################################
# Add contents of register RRRR to accumulator with carry.
################################################################################
= ADD   0x8

################################################################################
# Subtract contents of register RRRR to accumulator with borrow.
################################################################################
= SUB   0x9

################################################################################
# Load contents of register RRRR to accumulator.
################################################################################
= LD    0xA

################################################################################
# Exchange contents of index register RRRR and accumulator.
################################################################################
= XCH   0xB

################################################################################
# Branch back (down 1 level in stack) and load data DDDD to accumulator.
################################################################################
= BBL   0xC

################################################################################
# Load data DDDD to accumulator.
################################################################################
= LDM   0xD

################################################################################
# Clear both. (Accumulator and carry)
################################################################################
= CLB   0xF0

################################################################################
# Clear carry.
################################################################################
= CLC   0xF1

################################################################################
# Increment accumulator.
################################################################################
= IAC   0xF2

################################################################################
# Complement carry.
################################################################################
= CMC   0xF3

################################################################################
# Complement accumulator.
################################################################################
= CMA   0xF4

################################################################################
# Rotate left. (Accumulator and carry)
################################################################################
= RAL   0xF5

################################################################################
# Rotate right. (Accumulator and carry)
################################################################################
= RAR   0xF6

################################################################################
# Transmit carry to accumulator and clear carry.
################################################################################
= TCC   0xF7

################################################################################
# Decrement accumulator.
################################################################################
= DAC   0xF8

################################################################################
# Transfer carry subtract and clear carry.
################################################################################
= TCS   0xF9

################################################################################
# Set carry.
################################################################################
= STC   0xFA

################################################################################
# Decimal adjust accumulator.
################################################################################
= DAA   0xFB

################################################################################
# Keyboard process. Converts the contents of the accumulator
# from a one out of four code to a binary code.
################################################################################
= KBP   0xFC

################################################################################
# Designate command line.
################################################################################
= DCL   0xFD

################################################################################
# Send register control. Send the address (contents of index register pair RRR)
# to ROM and RAM at X2 and X3 time in the instruction cycle.
################################################################################
= SRC       0x2
= SRC_BIT   0b1

################################################################################
# Write the contents of the accumulator into the previously selected
# RAM main memory character.
################################################################################
= WRM   0xE0

################################################################################
# Write the contents of the accumulator into the previously selected
# RAM output port. (Output Lines)
################################################################################
= WMP   0xE1

################################################################################
# Write the contents of the accumulator into the previously selected
# ROM output port. (I/O Lines)
################################################################################
= WRR   0xE2

################################################################################
# Write the contents of the accumulator into the previously selected
# half byte of read/write program memory (used with 4008/4009 or 4289 only)
################################################################################
= WPM   0xE3

################################################################################
# Write the contents of the accumulator into the previously selected
# RAM status character 0.
################################################################################
= WR0   0xE4

################################################################################
# Write the contents of the accumulator into the previously selected
# RAM status character 1.
################################################################################
= WR1   0xE5

################################################################################
# Write the contents of the accumulator into the previously selected
# RAM status character 2.
################################################################################
= WR2   0xE6

################################################################################
# Write the contents of the accumulator into the previously selected
# RAM status character 3.
################################################################################
= WR3   0xE7

################################################################################
# Subtract the previously selected RAM main memory character
# from accumulator with borrow.
################################################################################
= SBM   0xE8

################################################################################
# Read the previously selected RAM main memory character into the accumulator.
################################################################################
= RDM   0xE9

################################################################################
# Read the contents of the previously selected ROM input port
# into the accumulator. (I/O Lines)
################################################################################
= RDR   0xEA

################################################################################
# Add the previously selected RAM main memory character
# to accumulator with carry.
################################################################################
= ADM   0xEB

################################################################################
# Read the previously selected RAM status character 0 into accumulator.
################################################################################
= RD0   0xEC

################################################################################
# Read the previously selected RAM status character 1 into accumulator.
################################################################################
= RD1   0xED

################################################################################
# Read the previously selected RAM status character 2 into accumulator.
################################################################################
= RD2   0xEE

################################################################################
# Read the previously selected RAM status character 3 into accumulator.
################################################################################
= RD3   0xEF

